{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wacbo\\\\Documents\\\\GitHub\\\\Semana-7\\\\TRAINEE REACT\\\\to-do-list\\\\src\\\\pages\\\\Tasks\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Page, Title, FieldInput, FieldInputCheck } from \"./styles\";\nimport { AiFillPlusCircle } from 'react-icons/ai';\nimport api from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputTask() {\n  return /*#__PURE__*/_jsxDEV(FieldInput, {\n    children: [/*#__PURE__*/_jsxDEV(AiFillPlusCircle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Add new task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n}\n\n_c = InputTask;\n\nfunction InputCheck(_ref) {\n  let {\n    name,\n    done,\n    id,\n    onUpdate\n  } = _ref;\n\n  const handleCheckTask = () => {\n    api.put(`/task/${id}`, {\n      done: !done\n    }).then(() => {\n      onUpdate();\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(FieldInputCheck, {\n    htmlFor: name,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      id: name,\n      defaultChecked: done,\n      checked: done === true ? true : undefined,\n      onChange: handleCheckTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), name]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n\n_c2 = InputCheck;\n\nfunction Tasks() {\n  _s();\n\n  const [tasks, setTasks] = useState([]);\n\n  const handleGetTasks = () => {\n    api.get('/task').then(response => {\n      setTasks(response.data);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(handleGetTasks, []);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      value\n    } = event.target.elements[0];\n    await api.post('/task', {\n      name: value\n    }).then(() => {\n      handleGetTasks();\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"TaskDo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(InputTask, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(InputCheck, { ...task,\n      onUpdate: handleGetTasks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tasks, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n\n_c3 = Tasks;\nexport default Tasks;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"InputTask\");\n$RefreshReg$(_c2, \"InputCheck\");\n$RefreshReg$(_c3, \"Tasks\");","map":{"version":3,"sources":["C:/Users/wacbo/Documents/GitHub/Semana-7/TRAINEE REACT/to-do-list/src/pages/Tasks/index.jsx"],"names":["React","useEffect","useState","Page","Title","FieldInput","FieldInputCheck","AiFillPlusCircle","api","InputTask","InputCheck","name","done","id","onUpdate","handleCheckTask","put","then","catch","error","console","log","undefined","Tasks","tasks","setTasks","handleGetTasks","get","response","data","handleSubmit","event","preventDefault","value","target","elements","post","map","task"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport { Page, Title, FieldInput, FieldInputCheck } from \"./styles\";\r\nimport {AiFillPlusCircle} from 'react-icons/ai'\r\nimport api from '../../services/api'\r\n\r\nfunction InputTask(){\r\n    return (\r\n        <FieldInput>\r\n            <AiFillPlusCircle />\r\n            <input type= \"text\" placeholder=\"Add new task\" />    \r\n        </FieldInput>\r\n    )\r\n}\r\n\r\nfunction InputCheck({name, done, id, onUpdate}){\r\n    const handleCheckTask = () => {\r\n        api.put(`/task/${id}`, {done: !done}).then(() => {\r\n            onUpdate()\r\n        }) .catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    return (\r\n        <FieldInputCheck htmlFor={name}>\r\n            <input type= \"checkbox\" id={name} defaultChecked={done} checked={done === true ? true: undefined} onChange={handleCheckTask}/> \r\n            <span />\r\n            {name}  \r\n        </FieldInputCheck>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction Tasks() {\r\n    const [tasks, setTasks] = useState([])\r\n    const handleGetTasks = () => {\r\n        api.get('/task').then(response => {\r\n            setTasks(response.data)\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    useEffect(handleGetTasks,[])\r\n    const handleSubmit = async event => {\r\n        event.preventDefault()\r\n        const {value} = event.target.elements[0]\r\n        await api.post('/task', {name: value}).then(() =>{\r\n            handleGetTasks()\r\n        }).catch(error => {\r\n            console.log(error)\r\n        })\r\n    }\r\n    return (\r\n        <Page>\r\n            <Title>TaskDo</Title>\r\n            <form onSubmit={handleSubmit}>\r\n                <InputTask />\r\n            </form>\r\n            {\r\n                tasks.map(task => (\r\n\r\n                    <InputCheck {...task} onUpdate={handleGetTasks}/>\r\n                ))\r\n            }\r\n        </Page>\r\n    )\r\n\r\n}\r\n\r\nexport default Tasks"]},"metadata":{},"sourceType":"module"}